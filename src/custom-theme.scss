// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.
// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();
$step-blue-palette: ( 50: #e3e2f0, 100: #b9b6da, 200: #8a85c1, 300: #5b54a8, 400: #372f95, 500: #140a82, 600: #12097a, 700: #0e076f, 800: #0b0565, 900: #060352, A100: #8785ff, A200: #5552ff, A400: #231fff, A700: #0a05ff, contrast: ( 50: rgba(#000000, 0.87), 100: rgba(#000000, 0.87), 200: rgba(#000000, 0.87), 300: rgba(#000000, 0.87), 400: rgba(#000000, 0.87), 500: #ffffff, 600: #ffffff, 700: #ffffff, 800: #ffffff, 900: #ffffff, A100: rgba(#000000, 0.87), A200: #ffffff, A400: #ffffff, A700: #ffffff, ), );
//////
$step-cyan-palette: ( 50: #e0f6f9, 100: #b3e8f0, 200: #80d8e6, 300: #4dc8db, 400: #26bdd4, 500: #00b1cc, 600: #00aac7, 700: #00a1c0, 800: #0098b9, 900: #0088ad, A100: #d7f5ff, A200: #a4e8ff, A400: #71dbff, A700: #58d5ff, contrast: ( 50: rgba(#000000, 0.87), 100: rgba(#000000, 0.87), 200: rgba(#000000, 0.87), 300: rgba(#000000, 0.87), 400: rgba(#000000, 0.87), 500: #ffffff, 600: #ffffff, 700: #ffffff, 800: #ffffff, 900: #ffffff, A100: rgba(#000000, 0.87), A200: rgba(#000000, 0.87), A400: rgba(#000000, 0.87), A700: rgba(#000000, 0.87), ), );
//////////////
$step-green-palette: ( 50: #e8f5e9, 100: #c8e6c9, 200: #a5d6a7, 300: #81c784, 400: #66bb6a, 500: #4caf50, 600: #43a047, 700: #388e3c, 800: #2e7d32, 900: #1b5e20, A100: #b9f6ca, A200: #69f0ae, A400: #00e676, A700: #00c853, contrast: ( 50: rgba(#000000, 0.87), 100: rgba(#000000, 0.87), 200: rgba(#000000, 0.87), 300: rgba(#000000, 0.87), 400: rgba(#000000, 0.87), 500: rgba(#000000, 0.87), 600: #ffffff, 700: #ffffff, 800: #ffffff, 900: #ffffff, A100: rgba(#000000, 0.87), A200: rgba(#000000, 0.87), A400: rgba(#000000, 0.87), A700: rgba(#000000, 0.87), ), );
//////////////////////
$step-yellow-palette: ( 50: #fff9e8, 100: #fff0c6, 200: #ffe6a0, 300: #ffdb79, 400: #ffd45d, 500: #ffcc40, 600: #ffc73a, 700: #ffc032, 800: #ffb92a, 900: #ffad1c, A100: #ffffff, A200: #ffffff, A400: #ffeccd, A700: #ffe2b3, contrast: ( 50: rgba(#000000, 0.87), 100: rgba(#000000, 0.87), 200: rgba(#000000, 0.87), 300: rgba(#000000, 0.87), 400: rgba(#000000, 0.87), 500: rgba(#000000, 0.87), 600: rgba(#000000, 0.87), 700: rgba(#000000, 0.87), 800: rgba(#000000, 0.87), 900: rgba(#000000, 0.87), A100: rgba(#000000, 0.87), A200: rgba(#000000, 0.87), A400: rgba(#000000, 0.87), A700: rgba(#000000, 0.87), ), );
/////////////////
$step-orange-palette: ( 50: #ffece4, 100: #ffcfba, 200: #ffaf8d, 300: #ff8f5f, 400: #ff773c, 500: #ff5f1a, 600: #ff5717, 700: #ff4d13, 800: #ff430f, 900: #ff3208, A100: #ffffff, A200: #fff5f4, A400: #ffc9c1, A700: #ffb3a7, contrast: ( 50: rgba(#000000, 0.87), 100: rgba(#000000, 0.87), 200: rgba(#000000, 0.87), 300: rgba(#000000, 0.87), 400: rgba(#000000, 0.87), 500: rgba(#000000, 0.87), 600: rgba(#000000, 0.87), 700: rgba(#000000, 0.87), 800: white, 900: white, A100: rgba(#000000, 0.87), A200: rgba(#000000, 0.87), A400: rgba(#000000, 0.87), A700: black, ), );
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$STEP-SITE-primary: mat.define-palette($step-blue-palette, 500);
$STEP-SITE-accent: mat.define-palette($step-orange-palette, 500);
// The warn palette is optional (defaults to red).
$STEP-SITE-warn: mat.define-palette($step-yellow-palette, 500);
$STEP-SITE-link: mat.define-palette($step-green-palette, 500);
$STEP-SITE-info: mat.define-palette($step-cyan-palette, 500);
// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$STEP-SITE-theme: mat.define-light-theme( ( color: ( primary: $STEP-SITE-primary, accent: $STEP-SITE-accent, warn: $STEP-SITE-warn, link: $STEP-SITE-link, info: $STEP-SITE-info, ), ));
// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($STEP-SITE-theme);
// MEDIA QUERY
// see node_modules/@angular/flex-layout/_mq.scss
// Non-overlapping Material Design breakpoints
// @type map
$breakpoints: ( xs: ( begin: 0, end: 599.9px, ), sm: ( begin: 600px, end: 959.9px, ), md: ( begin: 960px, end: 1279.9px, ), lg: ( begin: 1280px, end: 1919.9px, ), xl: ( begin: 1920px, end: 4999.99px, ), ) !default;
// Overlapping breakpoints that are greater than defined
// Material Design breakpoints
// @type map
$overlapping-gt: ( gt-xs: 600px, gt-sm: 960px, gt-md: 1280px, gt-lg: 1920px, ) !default;
// Overlapping breakpoints that are less than defined
// Material Design breakpoints
// @type map
$overlapping-lt: ( lt-sm: 599.9px, lt-md: 959.9px, lt-lg: 1279.9px, lt-xl: 1919.9px, ) !default;
@mixin layout-bp($bp) {
    @if map-has-key($breakpoints, $bp) {
        $min: map-get(map-get($breakpoints, $bp), begin);
        $max: map-get(map-get($breakpoints, $bp), end);
        @media (min-width: $min) and (max-width: $max) {
            @content;
        }
    }
    @else if map-has-key($overlapping-gt, $bp) {
        $min: map-get($overlapping-gt, $bp);
        @media (min-width: $min) {
            @content;
        }
    }
    @else if map-has-key($overlapping-lt, $bp) {
        $max: map-get($overlapping-lt, $bp);
        @media (max-width: $max) {
            @content;
        }
    }
}

$allkeys: map_keys( map_merge($breakpoints, map_merge($overlapping-gt, $overlapping-lt)));
@each $key in $allkeys {
    @include layout-bp($key) {
        .ge-display-none-#{$key} {
            display: none !important;
        }
        .ge-display-block-#{$key} {
            display: block !important;
        }
        .ge-display-inline-#{$key} {
            display: inline !important;
        }
        .ge-padding-0-#{$key} {
            padding: 16px !important;
        }
        .ge-padding-16px-#{$key} {
            padding: 0 !important;
        }
        .ge-margin-0-#{$key} {
            margin: 16px !important;
        }
        .ge-margin-16px-#{$key} {
            margin: 0 !important;
        }
    }
}